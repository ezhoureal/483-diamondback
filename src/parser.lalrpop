use std::str::FromStr;
use crate::syntax::{FunDecl, SurfProg, SurfFunDecl, Exp, Prim};
use crate::span::Span1;

grammar;

pub Prog: SurfProg<Span1> = Exp;

FUNDEFS: Exp<Span1> = {
    <l: @L> <funs: (FunDecl "and")*> <last: FunDecl> "in" <body: Boxed<Exp>> <r: @R> => {
      let mut decls: Vec<SurfFunDecl<Span1>> = funs.into_iter().map(|(decl, _)| decl).collect();
      decls.push(last);
      Exp::FunDefs { decls, body, ann: Span1 { start_ix: l, end_ix: r} }
    }
}

Boxed<T>: Box<T> = {
  <t: T> => Box::new(t)
}

FunDecl: SurfFunDecl<Span1> = {
    <l: @L> "def" <name: Id> "(" <parameters: Comma<Id>> ")" ":" <body: Exp> <r: @R> =>
        FunDecl { name, parameters, body, ann: Span1 { start_ix: l, end_ix: r}  }
}

pub Exp: Exp<Span1> = {
    IF,
    LET,
    FUNDEFS,
    BinOps
}

IF: Exp<Span1> = {
    <l: @L> "if" <cond: Exp> ":" <thn: Exp> "else" ":" <els:Exp> <r: @R> =>
        Exp::If { cond: Box::new(cond), thn: Box::new(thn), els: Box::new(els), ann: Span1 { start_ix: l, end_ix: r }},
}

LET: Exp<Span1> = {
    <l: @L> "let" <bindings:Bindings> "in" <body: Exp> <r: @R> => Exp::Let { bindings, body: Box::new(body), ann: Span1 { start_ix: l, end_ix: r }},
}

LAssoc<Op, Next>: Exp<Span1> = {
    <l: @L> <e1: LAssoc<Op,Next>> <op: Op> <e2: Next> <r: @R> =>
        Exp::Prim(op, vec![Box::new(e1), Box::new(e2)], Span1 { start_ix: l, end_ix: r }),
    Next
}

RAssoc<Op, Next>: Exp<Span1> = {
    <l: @L> <e1: Next> <op: Op> <e2: RAssoc<Op, Next>> <r: @R> =>
        Exp::Prim(op, vec![Box::new(e1), Box::new(e2)], Span1 { start_ix: l, end_ix: r }),
    Next
}

BinOps = LogExp;
LogExp = RAssoc<Log, CmpExp>;
CmpExp = LAssoc<Cmp, Sum>;
Sum = LAssoc<PlusMinus, Product>;
Product = LAssoc<Times, NotExp>;

PlusMinus: Prim = {
    "+" => Prim::Add,
    "-" => Prim::Sub,
}

Times: Prim = {
    "*" => Prim::Mul
}

Log: Prim = {
    "&&" => Prim::And,
    "||" => Prim::Or,
}

Cmp: Prim = {
    "<" => Prim::Lt,
    "<=" => Prim::Le,
    ">" => Prim::Gt,
    ">=" => Prim::Ge,
    "==" => Prim::Eq,
    "!=" => Prim::Neq,
}

NotExp: Exp<Span1> = {
    <l: @L> "!" <e: BaseExp> <r: @R> =>
        Exp::Prim(Prim::Not, vec![Box::new(e)], Span1 { start_ix: l, end_ix: r }),
    BaseExp
}

BaseExp: Exp<Span1> = {
    <l: @L> <x: Id> <r: @R> => Exp::Var(x, Span1 { start_ix: l, end_ix: r }),
    <l: @L> <b: Bool> <r: @R> => Exp::Bool(b, Span1 { start_ix: l, end_ix: r }),
    <l: @L> <n: Num> <r:@R> => Exp::Num(n, Span1 { start_ix: l, end_ix: r }),
    <l:@L> <p:Prim1> "(" <e: Exp> ")" <r:@R> =>
           Exp::Prim(p, vec![Box::new(e)], Span1 { start_ix: l, end_ix: r }),
    "(" <e: Exp> ")" => e,
    <l: @L> <x: Id> "(" <es: Comma<Exp> > ")" <r: @R> => Exp::Call(x, es, Span1 { start_ix: l, end_ix: r }),
}

Comma<T>: Vec<T> = {
    <mut v: (<T> ",")*> <last: T?> => {
        match last {
            None => { },
            Some(t) => { v.push(t); }
        };
        v
    }
}

Prim1: Prim = {
    "add1" => Prim::Add1,
    "sub1" => Prim::Sub1,
    "print" => Prim::Print,
    "isnum" => Prim::IsNum,
    "isbool" => Prim::IsBool,
}

Bindings: Vec<(String, Exp<Span1>)> = {
    <x: Id> "=" <e: Exp> => vec![(x, e)],
    <mut bs:Bindings> "," <x: Id> "=" <e: Exp> => {
        bs.push((x, e));
        bs
    }
}

Num: i64 = <s:r"[+-]?[0-9]+"> => i64::from_str(s).unwrap();
Id: String = <s:r"[a-zA-Z][a-zA-Z0-9_]*"> => String::from(s);
Bool: bool = {
    "true" => true,
    "false" => false,
}
